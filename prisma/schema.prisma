generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEVELOPER
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum NotificationType {
  PARENT_REMARK
  PROGRESS_UPDATE
  SYSTEM_ALERT
  FEE_DUE
  FEE_PAID
  SALARY_PAID
  SUBSCRIPTION_DUE
  SUBSCRIPTION_PAID
  PAYMENT_PROCESSING
  PAYMENT_VERIFIED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum FeeType {
  ONCE
  MONTHLY
  BIMONTHLY
  QUARTERLY
  HALFYEARLY
  YEARLY
}

enum FeeStatus {
  PENDING
  PROCESSING
  PAID
  OVERDUE
  CANCELLED
}

enum SalaryStatus {
  PENDING
  PROCESSING
  PAID
  OVERDUE
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  PROCESSING
  EXPIRED
  CANCELLED
}

enum SubscriptionPlan {
  MONTHLY
  YEARLY
  LIFETIME
}

enum ClassDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PayType {
  DAILY
  WEEKLY
  FORTNIGHTLY
  MONTHLY
}

enum RelationType {
  FATHER
  MOTHER
  GUARDIAN
  STEPFATHER
  STEPMOTHER
  GRANDFATHER
  GRANDMOTHER
  UNCLE
  AUNT
  SIBLING
  COUSIN
  OTHER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  adminId   String?  // All users except DEVELOPER belong to an admin
  isActive  Boolean  @default(true) // For disabling users
  
  // Additional user details
  mobile    String?
  dateOfBirth DateTime? // Only for STUDENT and TEACHER
  address   String?
  
  // Teacher specific fields
  qualification String?
  payRate      Float?
  payType      PayType? // DAILY, WEEKLY, FORTNIGHTLY, MONTHLY
  payCurrency  String?  // Currency for teacher pay
  
  // Parent specific fields
  profession   String?  // Parent's profession
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admin              User?              @relation("AdminUsers", fields: [adminId], references: [id])
  managedUsers       User[]             @relation("AdminUsers")
  settings           Settings?
  teacherAssignments TeacherStudent[]   @relation("Teacher")
  studentAssignments TeacherStudent[]   @relation("Student")
  parentChildren     ParentStudent[]    @relation("Parent")
  studentParents     ParentStudent[]    @relation("Student")
  studentCourses     StudentCourse[]
  progressRecords    Progress[]         @relation("StudentProgress")
  progressUpdates    Progress[]         @relation("TeacherProgress")
  createdCourses     Course[]
  parentRemarks      ParentRemark[]     @relation("ParentRemarks")
  sentNotifications  Notification[]     @relation("NotificationSender")
  receivedNotifications Notification[]  @relation("NotificationReceiver")
  userSettings       UserSettings?
  studentFees        Fee[]              @relation("StudentFees")
  feePayments        Fee[]              @relation("FeePayments")
  teacherSalaries    Salary[]           @relation("TeacherSalaries")
  salaryPayments     Salary[]           @relation("SalaryPayments")
  subscriptions      Subscription[]     @relation("AdminSubscriptions")
  subscriptionPayments Subscription[]   @relation("SubscriptionPayments")
  studentAssignments2 Assignment[]      @relation("StudentAssignments")
  teacherAssignments2 Assignment[]      @relation("TeacherAssignments")
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String?
  adminId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admin           User            @relation(fields: [adminId], references: [id])
  studentCourses  StudentCourse[]
  progressRecords Progress[]
  assignments     Assignment[]
  fees            Fee[]
}

model Assignment {
  id          String   @id @default(uuid())
  studentId   String
  courseId    String
  teacherId   String
  assignmentDate DateTime @default(now())
  
  // Class schedule fields
  startTime   String?  // Format: "HH:MM"
  duration    Int?     // Duration in minutes
  classDays   ClassDay[] // Array of days when class is conducted
  timezone    String   @default("UTC") // Timezone for the class
  
  // Fee information
  monthlyFee  Float?
  currency    String   @default("USD")
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student User   @relation("StudentAssignments", fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
  teacher User   @relation("TeacherAssignments", fields: [teacherId], references: [id])

  @@unique([studentId, courseId, teacherId])
}

model TeacherStudent {
  id        String @id @default(uuid())
  teacherId String
  studentId String

  // Relations
  teacher User @relation("Teacher", fields: [teacherId], references: [id])
  student User @relation("Student", fields: [studentId], references: [id])

  @@unique([teacherId, studentId])
}

model ParentStudent {
  id           String       @id @default(uuid())
  parentId     String
  studentId    String
  relationType RelationType @default(GUARDIAN)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  parent  User @relation("Parent", fields: [parentId], references: [id])
  student User @relation("Student", fields: [studentId], references: [id])

  @@unique([parentId, studentId])
}

model StudentCourse {
  id        String @id @default(uuid())
  studentId String
  courseId  String

  // Relations
  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
}

model Progress {
  id             String           @id @default(uuid())
  studentId      String
  courseId       String
  teacherId      String
  date           DateTime         @default(now())
  lesson         String?          // Manually typed by teacher
  homework       String?          // Homework description
  lessonProgress Float?           // Lesson progress percentage
  score          Float?           // Score/marks assigned by teacher
  remarks        String?          // Teacher remarks
  attendance     AttendanceStatus @default(PRESENT) // Attendance status
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  student       User           @relation("StudentProgress", fields: [studentId], references: [id])
  course        Course         @relation(fields: [courseId], references: [id])
  teacher       User           @relation("TeacherProgress", fields: [teacherId], references: [id])
  parentRemarks ParentRemark[]
}

model ParentRemark {
  id         String   @id @default(uuid())
  progressId String
  parentId   String
  remark     String
  createdAt  DateTime @default(now())

  // Relations
  progress Progress @relation(fields: [progressId], references: [id])
  parent   User     @relation("ParentRemarks", fields: [parentId], references: [id])
}

model Fee {
  id          String    @id @default(uuid())
  studentId   String
  courseId    String?   // Link to specific course/subject
  title       String    // Fee title (e.g., "Tuition Fee", "Library Fee")
  description String?   // Optional description
  amount      Float     // Fee amount
  currency    String    @default("USD") // Currency symbol/code
  dueDate     DateTime  // Due date for payment
  status      FeeStatus @default(PENDING)
  paidDate    DateTime? // Date when fee was paid
  paidById    String?   // Parent who paid the fee
  
  // Monthly fee tracking
  month       Int?      // Month (1-12)
  year        Int?      // Year
  isRecurring Boolean   @default(false) // Is this a recurring monthly fee
  
  // Payment processing fields
  paidAmount     Float?    // Amount actually paid
  paymentDetails String?   // Payment details/remarks
  paymentProof   String?   // Screenshot/proof file path
  processedDate  DateTime? // Date when payment was processed by admin
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student User    @relation("StudentFees", fields: [studentId], references: [id])
  course  Course? @relation(fields: [courseId], references: [id])
  paidBy  User?   @relation("FeePayments", fields: [paidById], references: [id])
}

model Salary {
  id          String       @id @default(uuid())
  teacherId   String
  title       String       // Salary title (e.g., "Monthly Salary", "Bonus")
  description String?      // Optional description
  amount      Float        // Salary amount
  currency    String       @default("USD") // Currency symbol/code
  dueDate     DateTime     // Due date for payment
  status      SalaryStatus @default(PENDING)
  paidDate    DateTime?    // Date when salary was paid
  paidById    String?      // Admin who paid the salary
  
  // Periodic salary tracking
  month       Int?         // Month (1-12)
  year        Int?         // Year
  week        Int?         // Week number for weekly salaries
  day         DateTime?    // Specific day for daily salaries
  payType     PayType      @default(MONTHLY) // DAILY, WEEKLY, FORTNIGHTLY, MONTHLY
  isRecurring Boolean      @default(true)    // Most salaries are recurring
  
  // Payment processing fields
  paidAmount     Float?    // Amount actually paid
  paymentDetails String?   // Payment details/remarks
  paymentProof   String?   // Screenshot/proof file path
  processedDate  DateTime? // Date when payment was processed
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  teacher User  @relation("TeacherSalaries", fields: [teacherId], references: [id])
  paidBy  User? @relation("SalaryPayments", fields: [paidById], references: [id])
}

model Subscription {
  id          String             @id @default(uuid())
  adminId     String
  plan        SubscriptionPlan
  amount      Float
  currency    String             @default("USD")
  startDate   DateTime
  endDate     DateTime?          // Null for lifetime subscriptions
  status      SubscriptionStatus @default(ACTIVE)
  
  // Payment processing fields
  paidAmount     Float?    // Amount actually paid
  paidDate       DateTime? // Date when subscription was paid
  paymentDetails String?   // Payment details/remarks
  paymentProof   String?   // Screenshot/proof file path
  processedDate  DateTime? // Date when payment was processed by developer
  paidById       String?   // Admin who paid the subscription
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  admin  User  @relation("AdminSubscriptions", fields: [adminId], references: [id])
  paidBy User? @relation("SubscriptionPayments", fields: [paidById], references: [id])
}

model SubscriptionPayment {
  id             String   @id @default(uuid())
  adminId        String
  subscriptionId String?  // Link to subscription if applicable
  amount         Float
  currency       String   @default("USD")
  plan           SubscriptionPlan
  paymentDate    DateTime
  expiryExtended DateTime // How much expiry was extended
  
  // Payment details
  paymentDetails String?
  paymentProof   String?
  processedById  String?  // Developer who processed the payment
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType
  title      String
  message    String
  senderId   String
  receiverId String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  // Relations
  sender   User @relation("NotificationSender", fields: [senderId], references: [id])
  receiver User @relation("NotificationReceiver", fields: [receiverId], references: [id])
}

model Settings {
  id             String  @id @default(uuid())
  adminId        String  @unique
  appTitle       String  @default("AIMS")
  headerImg      String  @default("/assets/default-logo.png")
  headerImgUrl   String? // URL link for logo (alternative to upload)
  tagline        String  @default("Academy Information and Management System")
  enableHomePage Boolean @default(true) // Developer can enable/disable homepage
  defaultCurrency String @default("USD") // Admin's default currency
  
  // Subscription settings for this admin
  subscriptionType SubscriptionPlan @default(MONTHLY)
  subscriptionAmount Float @default(29.99)
  subscriptionStartDate DateTime @default(now())
  subscriptionEndDate DateTime? // Null for lifetime
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  admin User @relation(fields: [adminId], references: [id])
}

model UserSettings {
  id                    String  @id @default(uuid())
  userId                String  @unique
  enableNotifications   Boolean @default(true)
  emailNotifications    Boolean @default(true)
  parentRemarkNotifications Boolean @default(true)
  timezone              String  @default("UTC")
  secretQuestion1       String?
  secretAnswer1         String?
  secretQuestion2       String?
  secretAnswer2         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model AppSettings {
  id             String  @id @default(uuid())
  appLogo        String  @default("/assets/app-logo.png")
  appName        String  @default("AIMS")
  tagline        String  @default("Academy Information and Management System")
  enableHomePage Boolean @default(true) // Global homepage setting for developers
  defaultCurrency String @default("USD") // Global default currency
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}